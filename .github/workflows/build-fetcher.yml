name: Build & Deploy (dev)

# パーミッション設定
permissions:
  contents: read
  id-token: write
  deployments: write

on:
  push:
    branches: [dev] # dev ブランチにマージしたら自動
    paths:
      - "docker/fetcher/**"
      - "jobs/feature_import/**"
      - "src/**"
      - "terraform/**"
  workflow_dispatch: # UI から手動トリガー可能

env:
  REGION: asia-northeast1
  PROJECT_ID: ${{ secrets.PROJECT_ID }}

jobs:
  build:
    concurrency:
      group: terraform-dev # 同時実行防止
      cancel-in-progress: true # 古いプランのみキャンセル

    runs-on: ubuntu-latest

    steps:
      # 1) リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) jqをインストール
      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      # 3) GCP 認証：Auth
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider
          service_account: tf-apply-dev@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com

      # 4) gcloud CLI をセットアップ
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.PROJECT_ID }}

      # 5) Docker 認証設定
      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev

      # 6) Buildx セットアップ
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true # imagetoolsコマンドが確実に使えるように

      # 7) Fetcher イメージをビルド & プッシュ
      - name: Build & push fetcher image
        id: build_fetcher
        run: |
          set -euo pipefail
          IMG="$REGION-docker.pkg.dev/$PROJECT_ID/ml/fetcher:${{ github.sha }}"
          METAFILE=$(mktemp -t buildmeta.XXXXXX)

          docker buildx build --platform linux/amd64 \
            -t "$IMG" \
            -t "$REGION-docker.pkg.dev/$PROJECT_ID/ml/fetcher:latest" \
            -f docker/fetcher/Dockerfile . \
            --push \
            --metadata-file "$METAFILE"

          # メタデータからダイジェストを取得
          if [ -f "$METAFILE" ]; then
            DIGEST=$(jq -r '."containerimage.digest"' "$METAFILE")
            
            # ダイジェストの形式を検証
            if [[ ! "$DIGEST" =~ ^sha256:[0-9a-f]{64}$ ]]; then
              echo "Error: Invalid digest format: $DIGEST"
              exit 1
            fi
            
            echo "Image digest: $DIGEST"
            echo "uri=$REGION-docker.pkg.dev/$PROJECT_ID/ml/fetcher@$DIGEST" >> "$GITHUB_OUTPUT"
            rm -f "$METAFILE"
          else
            echo "Error: Metadata file not found"
            exit 1
          fi

      # 8) Feature Import イメージをビルド & プッシュ
      - name: Build & push feature-import
        id: build_import
        run: |
          set -euo pipefail
          IMG="$REGION-docker.pkg.dev/$PROJECT_ID/ml/feature-import:${{ github.sha }}"
          METAFILE=$(mktemp -t buildmeta.XXXXXX) # BuildKit が書き出すメタデータ用の一時ファイル

          docker buildx build --platform linux/amd64 \
            -t "$IMG" \
            -t "$REGION-docker.pkg.dev/$PROJECT_ID/ml/feature-import:latest" \
            -f jobs/feature_import/Dockerfile jobs/feature_import \
            --push \
            --metadata-file "$METAFILE"

          if [ -f "$METAFILE" ]; then
            DIGEST=$(jq -r '."containerimage.digest"' "$METAFILE")
            
            if [[ ! "$DIGEST" =~ ^sha256:[0-9a-f]{64}$ ]]; then
              echo "Error: Invalid digest format: $DIGEST"
              exit 1
            fi
            
            echo "Image digest: $DIGEST"
            echo "uri=$REGION-docker.pkg.dev/$PROJECT_ID/ml/feature-import@$DIGEST" >> "$GITHUB_OUTPUT"
            rm -f "$METAFILE"
          else
            echo "Error: Metadata file not found"
            exit 1
          fi

      # 9) Terraform をセットアップ
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: 1.8.0

      # 10) Terraform の適用
      - name: Terraform apply (dev)
        working-directory: terraform
        env:
          TF_VAR_fetcher_image_uri: ${{ steps.build_fetcher.outputs.uri }}
          TF_VAR_feature_import_image_uri: ${{ steps.build_import.outputs.uri }}
        run: |
          terraform init -backend-config=envs/dev/backend.conf -upgrade -input=false
          terraform workspace select dev || terraform workspace new dev

          # 変数ファイルを使用してapply
          terraform apply -auto-approve -input=false \
            -var "project_id=${{ secrets.PROJECT_ID }}" \
            -var-file=envs/dev/terraform.tfvars \
            -lock-timeout=300s
