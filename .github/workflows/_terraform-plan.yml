# プラン実行用
name: "_terraform-plan"

on:
  workflow_call:
    inputs:
      workspace:
        required: true
        type: string
      environment:
        required: true
        type: string
    secrets:
      PROJECT_ID:
        required: true
      PROJECT_NUMBER:
        required: true

jobs:
  plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    concurrency:
      group: terraform-${{ inputs.workspace }}-plan # 同時実行防止
      cancel-in-progress: true # 古いプランのみキャンセル
    steps:
      # 1) リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) GCP 認証
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider
          service_account: tf-apply-${{ inputs.workspace }}@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com
          project_id: ${{ secrets.PROJECT_ID }}

      # 3) Terraform をセットアップ
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: 1.8.0

      # 4) Terraform 初期化
      - name: Initialize Terraform
        working-directory: terraform
        run: |
          terraform init \
            -backend-config=envs/${{ inputs.workspace }}/backend.conf \
            -input=false \
            -reconfigure

      # 5) ワークスペース選択
      - name: Select workspace
        working-directory: terraform
        run: terraform workspace select ${{ inputs.workspace }} || terraform workspace new ${{ inputs.workspace }}

      # 6) Terraform の検証
      - name: Validate Terraform
        working-directory: terraform
        run: terraform validate

      # 7) Terraform のフォーマットチェック
      - name: Format Check
        working-directory: terraform
        run: terraform fmt -check

      # 8) TFLint のセットアップ
      - uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.51.1

      # 9) TFLint の初期化
      - name: Init TFLint
        run: tflint --init
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # 10) TFLint の実行
      - name: Run TFLint
        run: tflint --chdir terraform

      # 11) Trivy IaC スキャン
      - name: Run Trivy IaC scanner
        id: trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: config
          scan-ref: ./terraform
          severity: HIGH,CRITICAL
          output: trivy-scan-result.txt
          exit-code: "0"

      # 12) Trivy 結果コメント (PR のときだけ)
      - name: Comment Trivy scan result to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let body = fs.readFileSync('trivy-scan-result.txt', 'utf8').trim();

            if (!body) {
              body = 'Trivy scan: 検出なし🎉';
            }

            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body,
            });

      # 12) Terraform Plan の実行
      - name: Terraform Plan
        id: plan
        working-directory: terraform
        run: |
          terraform plan \
            -var-file=envs/${{ inputs.workspace }}/terraform.tfvars \
            -var "project_id=${{ secrets.PROJECT_ID }}" \
            -var "env_suffix=${{ inputs.workspace }}" \
            -lock-timeout=300s \
            -no-color \
            -detailed-exitcode \
            -out=tfplan || TF_EXIT=$?

      # 13) PR へ Plan コメント
      - name: Comment plan to PR
        if: github.event_name == 'pull_request'
        uses: borchero/terraform-plan-comment@v2
        with:
          token: ${{ github.token }}
          planfile: tfplan
          working-directory: terraform
          header: "Terraform Plan (${{ inputs.workspace }})"
          skip-empty: true # 変更なしならコメントしない
