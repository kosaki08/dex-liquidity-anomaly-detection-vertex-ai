name: Build & Deploy (dev)

# パーミッション設定
permissions:
  contents: read
  id-token: write
  deployments: write

on:
  push:
    branches: [dev] # dev ブランチにマージしたら自動
    paths:
      - "docker/fetcher/**"
      - "jobs/feature_import/**"
      - "src/**"
      - "terraform/**"
  workflow_dispatch: # UI から手動トリガー可能

env:
  REGION: asia-northeast1
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  ENABLE_PREDICTION_GATEWAY: ${{ vars.ENABLE_PREDICTION_GATEWAY || 'false' }}
  ENV: ${{ github.event.inputs.workspace || 'dev' }}
  ENV_SUFFIX: ${{ github.event.inputs.workspace || 'dev' }}

jobs:
  build:
    concurrency:
      group: build-dev-${{ github.ref_name }} # 同時実行防止
      cancel-in-progress: true # 古いプランのみキャンセル

    runs-on: ubuntu-latest

    steps:
      # 1) リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) jqをインストール
      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      # 3) GCP 認証：Auth
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider
          service_account: tf-apply-dev@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com

      # 4) gcloud CLI をセットアップ
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.PROJECT_ID }}

      # 5) Docker 認証設定
      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev

      # 6) Buildx セットアップ
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true # imagetoolsコマンドが確実に使えるように

      # 7) Fetcher イメージをビルド & プッシュ
      - name: Build & push fetcher image
        id: build_fetcher
        run: |
          set -euo pipefail
          IMG="$REGION-docker.pkg.dev/$PROJECT_ID/ml/fetcher:${{ github.sha }}"
          METAFILE=$(mktemp -t buildmeta.XXXXXX)

          docker buildx build --platform linux/amd64 \
            -t "$IMG" \
            -t "$REGION-docker.pkg.dev/$PROJECT_ID/ml/fetcher:latest" \
            -f docker/fetcher/Dockerfile . \
            --push \
            --metadata-file "$METAFILE"

          # メタデータからダイジェストを取得
          if [ -f "$METAFILE" ]; then
            DIGEST=$(jq -r '."containerimage.digest"' "$METAFILE")
            
            # ダイジェストの形式を検証
            if [[ ! "$DIGEST" =~ ^sha256:[0-9a-f]{64}$ ]]; then
              echo "Error: Invalid digest format: $DIGEST"
              exit 1
            fi
            
            echo "Image digest: $DIGEST"
            echo "uri=$REGION-docker.pkg.dev/$PROJECT_ID/ml/fetcher@$DIGEST" >> "$GITHUB_OUTPUT"
            rm -f "$METAFILE"
          else
            echo "Error: Metadata file not found"
            exit 1
          fi

      # 9) Feature Import イメージをビルド & プッシュ
      - name: Build & push feature-import
        id: build_import
        run: |
          set -euo pipefail
          IMG="$REGION-docker.pkg.dev/$PROJECT_ID/ml/feature-import:${{ github.sha }}"
          METAFILE=$(mktemp -t buildmeta.XXXXXX) # BuildKit が書き出すメタデータ用の一時ファイル

          docker buildx build --platform linux/amd64 \
            -t "$IMG" \
            -t "$REGION-docker.pkg.dev/$PROJECT_ID/ml/feature-import:latest" \
            -f jobs/feature_import/Dockerfile jobs/feature_import \
            --push \
            --metadata-file "$METAFILE"

          if [ -f "$METAFILE" ]; then
            DIGEST=$(jq -r '."containerimage.digest"' "$METAFILE")
            
            if [[ ! "$DIGEST" =~ ^sha256:[0-9a-f]{64}$ ]]; then
              echo "Error: Invalid digest format: $DIGEST"
              exit 1
            fi
            
            echo "Image digest: $DIGEST"
            echo "uri=$REGION-docker.pkg.dev/$PROJECT_ID/ml/feature-import@$DIGEST" >> "$GITHUB_OUTPUT"
            rm -f "$METAFILE"
          else
            echo "Error: Metadata file not found"
            exit 1
          fi

      # 10) Terraform をセットアップ
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: 1.8.0

      # 11) Terraform の適用
      - name: Terraform apply (dev)
        working-directory: terraform
        env:
          TF_VAR_fetcher_image_uri: ${{ steps.build_fetcher.outputs.uri }}
          TF_VAR_feature_import_image_uri: ${{ steps.build_import.outputs.uri }}
        run: |
          terraform init -backend-config=envs/dev/backend.conf -upgrade -input=false
          terraform workspace select dev || terraform workspace new dev

          # 変数ファイルを使用してapply
          terraform apply -auto-approve -input=false \
            -var "project_id=${{ secrets.PROJECT_ID }}" \
            -var-file=envs/dev/terraform.tfvars \
            -lock-timeout=300s

          # outputsを環境変数に保存
          echo "ENDPOINT_ID=$(terraform output -raw vertex_ai_endpoint_id)" >> "$GITHUB_ENV"

      # 12) Model を Vertex AI にデプロイ
      - name: Upload & Deploy model to Vertex AI
        id: deploy_vertex
        run: |
          set -euo pipefail

          # ENV_SUFFIXはジョブレベルのenvで定義済みなので、そのまま使用可能
          MODEL_BUCKET="${PROJECT_ID}-data-${ENV_SUFFIX}"

          # モデルファイルの存在確認
          if [ ! -d "models/iforest" ]; then
            echo "::error::Model directory 'models/iforest' not found"
            exit 1
          fi

          # GCSへのアップロード
          echo "Uploading model to gs://${MODEL_BUCKET}/models/iforest/"
          gsutil cp models/iforest/* gs://${MODEL_BUCKET}/models/iforest/

          # モデルのアップロード
          MODEL_ID=$(gcloud ai models upload \
            --region="${REGION}" \
            --display-name="iforest-${ENV_SUFFIX}-$(date +%Y%m%d%H%M%S)" \
            --artifact-uri="gs://$MODEL_BUCKET/models/iforest/" \
            --container-image-uri="us-docker.pkg.dev/vertex-ai/prediction/sklearn-cpu.1-4:latest" \
            --format="value(name)")

          echo "Model uploaded with ID: ${MODEL_ID}"

          # 既存のエンドポイントを検索
          ENDPOINT_ID=$(gcloud ai endpoints list \
            --region="${REGION}" \
            --filter="displayName=dex-prediction-endpoint-${ENV_SUFFIX}" \
            --format="value(name)" || true)

          # エンドポイントが無ければTerraform outputから取得
          if [ -z "$ENDPOINT_ID" ]; then
            echo "Existing endpoint not found, getting from Terraform output..."
            
            # Terraform outputから取得（修正: vertex_ai_endpoint_id を使用）
            ENDPOINT_ID=$(terraform output -raw vertex_ai_endpoint_id 2>/dev/null || echo "")
            
            # それでも空の場合はエラー
            if [ -z "$ENDPOINT_ID" ]; then
              echo "::error::ENDPOINT_ID could not be determined from either gcloud list or terraform output"
              exit 1
            fi
          fi

          echo "Using endpoint: ${ENDPOINT_ID}"

          # モデルをエンドポイントにデプロイ
          gcloud ai endpoints deploy-model "${ENDPOINT_ID}" \
            --model="${MODEL_ID}" \
            --region="${REGION}" \
            --traffic-split=0=100 \
            --machine-type=n1-standard-2

          # GitHub 環境変数へ展開（エンドポイントIDのみ抽出）
          ENDPOINT_ID_SHORT="${ENDPOINT_ID##*/}"
          echo "ENDPOINT_ID=${ENDPOINT_ID_SHORT}" >> "$GITHUB_ENV"

          echo "Model deployment completed. Endpoint ID: ${ENDPOINT_ID_SHORT}"

      # 13) トラフィックを切り替えて古いモデルを削除
      - name: Swap traffic & abandon old model
        if: steps.deploy_vertex.outcome == 'success'
        run: |
          set -euo pipefail
          REGION="${{ env.REGION }}"
          ENDPOINT="${ENDPOINT_ID}"
          # 直近 2 モデル取得
          MODELS=$(gcloud ai endpoints describe "${ENDPOINT}" --region "${REGION}" \
                    --format="value(deployedModels[].id)")
          NEW_MODEL=$(echo "${MODELS}" | cut -d',' -f1)
          OLD_MODEL=$(echo "${MODELS}" | cut -d',' -f2 || true)

          # 旧モデルがあれば split を切り替えて 0%→delete
          if [ -n "${OLD_MODEL}" ]; then
            gcloud ai endpoints update "${ENDPOINT}" \
              --region "${REGION}" \
              --traffic-split="${OLD_MODEL}=0,${NEW_MODEL}=100"
            gcloud ai endpoints undeploy-model "${ENDPOINT}" \
              --deployed-model-id="${OLD_MODEL}" \
              --region "${REGION}" --quiet
          fi

      # 14) Cloud Functions のデプロイ
      - name: Deploy Prediction Gateway Function
        if: env.ENABLE_PREDICTION_GATEWAY == 'true'
        env:
          ENV_SUFFIX: ${{ env.ENV }}
          REGION: ${{ env.REGION }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
        run: |
          set -euo pipefail

          # 変数の定義
          FUNC="dex-prediction-gateway-${ENV_SUFFIX}"

          # ALLOWED_ORIGINS を prefix 追加
          ALLOWED_ORIGINS="https://lookerstudio.google.com"
          [ "$ENV_SUFFIX" = "dev" ] && ALLOWED_ORIGINS+=",http://localhost:3000"

          # デプロイ
          gcloud functions deploy "$FUNC" \
            --gen2 \
            --runtime python311 \
            --region "${REGION}" \
            --source functions/prediction_gateway \
            --entry-point predict \
            --trigger-http \
            --allow-unauthenticated \
            --min-instances=$([ "$ENV_SUFFIX" = "prod" ] && echo 1 || echo 0) \
            --set-env-vars="^|^PROJECT_ID=${PROJECT_ID}|ENDPOINT_ID=${ENDPOINT_ID}|REGION=${REGION}|ALLOWED_ORIGINS=${ALLOWED_ORIGINS}"
