name: Build & Deploy (dev)

# パーミッション設定
permissions:
  contents: read
  id-token: write
  deployments: write

on:
  push:
    branches: [dev] # dev ブランチにマージしたら自動
    paths:
      - "docker/fetcher/**"
      - "jobs/feature_import/**"
      - "src/**"
      - "terraform/**"
  workflow_dispatch: # UI から手動トリガー可能

env:
  REGION: asia-northeast1
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  ENABLE_PREDICTION_GATEWAY: ${{ vars.ENABLE_PREDICTION_GATEWAY || 'false' }}
  ENV_SUFFIX: ${{ github.event.inputs.workspace || 'dev' }}
  VERSION: v${{ github.run_number }}
  MODEL_NAME: iforest
  MODEL_BUCKET: ${{ secrets.PROJECT_ID }}-models

jobs:
  build:
    concurrency:
      group: build-dev-${{ github.ref_name }} # 同時実行防止
      cancel-in-progress: true # 古いプランのみキャンセル

    runs-on: ubuntu-latest

    steps:
      # 1) リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) jqをインストール
      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      # 3) GCP 認証：Auth
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider
          service_account: tf-apply-dev@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com

      # 4) gcloud CLI をセットアップ
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.PROJECT_ID }}

      # 5) Docker 認証設定
      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev

      # 6) Buildx セットアップ
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true # imagetoolsコマンドが確実に使えるように

      # 7) Fetcher イメージをビルド & プッシュ
      - name: Build & push fetcher image
        id: build_fetcher
        run: |
          set -euo pipefail
          IMG="$REGION-docker.pkg.dev/$PROJECT_ID/ml/fetcher:${{ github.sha }}"
          METAFILE=$(mktemp -t buildmeta.XXXXXX)

          docker buildx build --platform linux/amd64 \
            -t "$IMG" \
            -t "$REGION-docker.pkg.dev/$PROJECT_ID/ml/fetcher:latest" \
            -f docker/fetcher/Dockerfile . \
            --push \
            --metadata-file "$METAFILE"

          # メタデータからダイジェストを取得
          if [ -f "$METAFILE" ]; then
            DIGEST=$(jq -r '."containerimage.digest"' "$METAFILE")
            
            # ダイジェストの形式を検証
            if [[ ! "$DIGEST" =~ ^sha256:[0-9a-f]{64}$ ]]; then
              echo "Error: Invalid digest format: $DIGEST"
              exit 1
            fi
            
            echo "Image digest: $DIGEST"
            echo "uri=$REGION-docker.pkg.dev/$PROJECT_ID/ml/fetcher@$DIGEST" >> "$GITHUB_OUTPUT"
            rm -f "$METAFILE"
          else
            echo "Error: Metadata file not found"
            exit 1
          fi

      # 8) Feature Import イメージをビルド & プッシュ
      - name: Build & push feature-import
        id: build_import
        run: |
          set -euo pipefail
          IMG="$REGION-docker.pkg.dev/$PROJECT_ID/ml/feature-import:${{ github.sha }}"
          METAFILE=$(mktemp -t buildmeta.XXXXXX) # BuildKit が書き出すメタデータ用の一時ファイル

          docker buildx build --platform linux/amd64 \
            -t "$IMG" \
            -t "$REGION-docker.pkg.dev/$PROJECT_ID/ml/feature-import:latest" \
            -f jobs/feature_import/Dockerfile . \
            --push \
            --metadata-file "$METAFILE"

          if [ -f "$METAFILE" ]; then
            DIGEST=$(jq -r '."containerimage.digest"' "$METAFILE")
            
            if [[ ! "$DIGEST" =~ ^sha256:[0-9a-f]{64}$ ]]; then
              echo "Error: Invalid digest format: $DIGEST"
              exit 1
            fi
            
            echo "Image digest: $DIGEST"
            echo "uri=$REGION-docker.pkg.dev/$PROJECT_ID/ml/feature-import@$DIGEST" >> "$GITHUB_OUTPUT"
            rm -f "$METAFILE"
          else
            echo "Error: Metadata file not found"
            exit 1
          fi

      # 9) モデルアーティファクトの取得
      - name: Download model artifacts from GCS
        id: download_model
        run: |
          set -euo pipefail

          # モデル格納バケット
          MODEL_SOURCE_BUCKET="${PROJECT_ID}-models"
          MODEL_PATH="iforest/latest/model.joblib"

          # GCSにモデルが存在するか確認
          if gsutil -q stat "gs://${MODEL_SOURCE_BUCKET}/${MODEL_PATH}" 2>/dev/null; then
            echo "Downloading model from GCS..."
            mkdir -p models/iforest
            if ! gsutil -m cp -r "gs://${MODEL_SOURCE_BUCKET}/iforest/latest/*" models/iforest/; then
              echo "::error::Failed to download model from GCS"
              exit 1
            fi
            echo "Model downloaded successfully"
            echo "model_found=true" >> "$GITHUB_OUTPUT"
          else
            echo "::error::No model found at gs://${MODEL_SOURCE_BUCKET}/${MODEL_PATH}"
            echo "::error::Please run the following command to initialize the model:"
            echo "::error::  ./scripts/init_model.sh ${PROJECT_ID} ${ENV_SUFFIX}"
            echo "model_found=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      # 10) モデルアーティファクトを latest にプロモート
      - name: Promote model artifact to latest
        if: ${{ env.ENV_SUFFIX == 'dev' && steps.download_model.outputs.model_found == 'true' }}
        run: |
          set -euo pipefail
          MODEL_BUCKET="${PROJECT_ID}-models"

          # ダウンロードしたモデルが存在するか確認
          if [ -d "models/iforest" ] && [ -n "$(find models/iforest -name '*.joblib' -type f)" ]; then
            echo "Found local model artifacts, promoting to latest..."
            
            # latest ディレクトリにコピー（-n で既存ファイルを上書きしない）
            gsutil -m cp -n models/iforest/*.joblib "gs://${MODEL_BUCKET}/iforest/latest/"
            echo "Model artifacts promoted to latest"
          else
            echo "::warning::No local model artifacts found to promote"
          fi

      # 11) Terraform をセットアップ
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: 1.8.0

      # 12) Terraform の適用
      - name: Terraform apply (dev)
        working-directory: terraform
        env:
          TF_VAR_fetcher_image_uri: ${{ steps.build_fetcher.outputs.uri }}
          TF_VAR_feature_import_image_uri: ${{ steps.build_import.outputs.uri }}
        run: |
          terraform init -backend-config=envs/dev/backend.conf -upgrade -input=false
          terraform workspace select dev || terraform workspace new dev

          # 変数ファイルを使用してapply
          terraform apply -auto-approve -input=false \
            -var "project_id=${{ secrets.PROJECT_ID }}" \
            -var-file=envs/dev/terraform.tfvars \
            -lock-timeout=300s

          # outputsを環境変数に保存
          echo "ENDPOINT_ID=$(terraform output -raw vertex_ai_endpoint_id)" >> "$GITHUB_ENV"

      # 13) Model をビルド
      - name: Build model artifact
        id: build_model
        run: |
          set -euo pipefail

          # Python環境セットアップ
          python3 -m pip install --quiet scikit-learn==1.4.2 joblib==1.4.2 numpy==1.26.4

          # モデルアーティファクト生成
          echo "Building model artifact version ${VERSION}..."
          python3 scripts/train_iforest.py \
            --out vertex_artifact/${VERSION} \
            --version ${VERSION}

          # 生成確認
          if [[ ! -f "vertex_artifact/${VERSION}/model.joblib" ]]; then
            echo "::error::Model artifact generation failed"
            exit 1
          fi

          echo "model_generated=true" >> "$GITHUB_OUTPUT"

      # 14) Model を GCS にアップロード
      - name: Upload model artifact
        if: steps.build_model.outputs.model_generated == 'true'
        shell: bash
        run: |
          set -euo pipefail

          # VERSION付きディレクトリをアップロード
          gsutil -m rsync -r -d vertex_artifact/${VERSION}/ \
            gs://${MODEL_BUCKET}/${MODEL_NAME}/${VERSION}/

          # latestを更新
          gsutil -m rsync -r -d vertex_artifact/${VERSION}/ \
            gs://${MODEL_BUCKET}/${MODEL_NAME}/latest/

      # 15) Model を Vertex AI にデプロイ
      - name: Upload & Deploy model to Vertex AI
        id: deploy_vertex
        shell: bash
        run: |
          set -euo pipefail

          MODEL_DISPLAY_NAME="iforest-${VERSION}"
          # --- maintenance: VERSIONディレクトリを指定
          MODEL_URI="gs://${MODEL_BUCKET}/${MODEL_NAME}/${VERSION}"

          echo "Uploading Vertex Model from ${MODEL_URI}..."
          MODEL_ID=$(gcloud ai models upload \
            --region="${REGION}" \
            --display-name="${MODEL_DISPLAY_NAME}" \
            --artifact-uri="${MODEL_URI}" \
            --container-image-uri="us-docker.pkg.dev/vertex-ai/prediction/sklearn-cpu.1-4:latest" \
            --format="value(name)")

      # 16) トラフィックを切り替えて古いモデルを削除
      - name: Swap traffic & abandon old model
        if: steps.deploy_vertex.outcome == 'success'
        run: |
          set -euo pipefail
          REGION="${{ env.REGION }}"
          ENDPOINT="${ENDPOINT_ID}"
          # 直近 2 モデル取得
          MODELS=$(gcloud ai endpoints describe "${ENDPOINT}" --region "${REGION}" \
                    --format="value(deployedModels[].id)")
          NEW_MODEL=$(echo "${MODELS}" | cut -d',' -f1)
          OLD_MODEL=$(echo "${MODELS}" | cut -d',' -f2 || true)

          # 旧モデルがあれば split を切り替えて 0%→delete
          if [ -n "${OLD_MODEL}" ]; then
            gcloud ai endpoints update "${ENDPOINT}" \
              --region "${REGION}" \
              --traffic-split="${OLD_MODEL}=0,${NEW_MODEL}=100"
            gcloud ai endpoints undeploy-model "${ENDPOINT}" \
              --deployed-model-id="${OLD_MODEL}" \
              --region "${REGION}" --quiet
          fi

      # 17) Cloud Functions のデプロイ
      - name: Deploy Prediction Gateway Function
        if: env.ENABLE_PREDICTION_GATEWAY == 'true'
        env:
          ENV_SUFFIX: ${{ env.ENV_SUFFIX }}
          REGION: ${{ env.REGION }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
        run: |
          set -euo pipefail

          # 変数の定義
          FUNC="dex-prediction-gateway-${ENV_SUFFIX}"

          # ALLOWED_ORIGINS を prefix 追加
          ALLOWED_ORIGINS="https://lookerstudio.google.com"
          [ "$ENV_SUFFIX" = "dev" ] && ALLOWED_ORIGINS+=",http://localhost:3000"

          # デプロイ
          gcloud functions deploy "$FUNC" \
            --gen2 \
            --runtime python311 \
            --region "${REGION}" \
            --source functions/prediction_gateway \
            --entry-point predict \
            --trigger-http \
            --allow-unauthenticated \
            --min-instances=$([ "$ENV_SUFFIX" = "prod" ] && echo 1 || echo 0) \
            --set-env-vars="^|^PROJECT_ID=${PROJECT_ID}|ENDPOINT_ID=${ENDPOINT_ID}|REGION=${REGION}|ALLOWED_ORIGINS=${ALLOWED_ORIGINS}"
